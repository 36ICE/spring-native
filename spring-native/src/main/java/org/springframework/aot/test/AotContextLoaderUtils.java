/*
 * Copyright 2019-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.aot.test;

import java.lang.reflect.Method;
import java.util.Collections;
import java.util.Map;
import java.util.function.Supplier;

import org.springframework.test.context.SmartContextLoader;
import org.springframework.util.ClassUtils;
import org.springframework.util.ReflectionUtils;

/**
 * Collection of utilities for working with {@link SmartContextLoader SmartContextLoaders}
 * that load generated application contexts for supported test classes.
 * <p/>
 * Reflectively accesses {@value #INITIALIZER_NAME} generated by the
 * {@code TestContextAotProcessor} in the {@code spring-aot-test} module to retrieve the
 * mapping of all supported test classes.
 *
 * @author Stephane Nicoll
 * @author Sam Brannen
 */
abstract class AotContextLoaderUtils {

	private static final String INITIALIZER_NAME = "org.springframework.aot.TestContextBootstrapInitializer";

	private static Map<String, Supplier<SmartContextLoader>> contextLoaders;

	/**
	 * For testing purposes only.
	 */
	static void setContextLoaders(Map<String, Supplier<SmartContextLoader>> contextLoaders) {
		AotContextLoaderUtils.contextLoaders = contextLoaders;
	}

	static boolean isSupportedTestClass(Class<?> testClass) {
		return getContextLoaders().containsKey(testClass.getName());
	}

	static SmartContextLoader getContextLoader(Class<?> testClass) {
		Supplier<SmartContextLoader> supplier = getContextLoaders().get(testClass.getName());
		return (supplier != null) ? supplier.get() : null;
	}

	private static Map<String, Supplier<SmartContextLoader>> getContextLoaders() {
		if (contextLoaders == null) {
			contextLoaders = loadContextLoadersMapping();
		}
		return contextLoaders;
	}

	@SuppressWarnings("unchecked")
	private static Map<String, Supplier<SmartContextLoader>> loadContextLoadersMapping() {
		try {
			Class<?> type = ClassUtils.forName(INITIALIZER_NAME, null);
			Method method = ReflectionUtils.findMethod(type, "getContextLoaders");
			return (Map<String, Supplier<SmartContextLoader>>) ReflectionUtils.invokeMethod(method, null);
		}
		catch (Exception ex) {
			// TODO: exception
			return Collections.emptyMap();
		}
	}

}
